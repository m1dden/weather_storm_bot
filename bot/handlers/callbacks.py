from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram import Bot
from datetime import datetime
from bot.utils.keyboards import get_main_menu_keyboard
from bot.utils.scheduler import storage
from bot.services.cache import data_cache


router = Router()

def add_timestamp(text: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
    if "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:" in text:
        return f"{text.split('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:')[0].strip()}\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    return f"{text}\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

@router.callback_query(F.data == "weather")
async def weather_callback(callback: CallbackQuery):
    weather_text = await data_cache.get_weather()
    updated_text = add_timestamp(weather_text)
    await callback.message.edit_text(
        text=updated_text,
        reply_markup=get_main_menu_keyboard(is_subscribed=callback.from_user.id in storage.subscribers)
    )
    await callback.answer()

@router.callback_query(F.data == "geomagnetic")
async def geomagnetic_callback(callback: CallbackQuery):
    geomagnetic_text, kp_index = await data_cache.get_geomagnetic_data()
    updated_text = add_timestamp(geomagnetic_text)
    await callback.message.edit_text(
        text=updated_text,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard(is_subscribed=callback.from_user.id in storage.subscribers)
    )
    await callback.answer()

@router.callback_query(F.data == "subscribe")
async def subscribe_callback(callback: CallbackQuery, bot: Bot):
    storage.add(callback.from_user.id)
    await callback.message.edit_reply_markup(
        reply_markup=get_main_menu_keyboard(is_subscribed=True)
    )
    await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "unsubscribe")
async def unsubscribe_callback(callback: CallbackQuery):
    storage.remove(callback.from_user.id)
    await callback.message.edit_reply_markup(
        reply_markup=get_main_menu_keyboard(is_subscribed=False)
    )
    await callback.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")

@router.callback_query(F.data == "refresh")
async def refresh_callback(callback: CallbackQuery):
    try:
        if "–ü–æ–≥–æ–¥–∞" in callback.message.text:
            new_data = await data_cache.get_weather()
        elif "–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è" in callback.message.text:
            new_data, _ = await data_cache.get_geomagnetic_data()
        else:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
            return
        
        updated_text = add_timestamp(new_data)
        await callback.message.edit_text(
            text=updated_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(
                is_subscribed=callback.from_user.id in storage.subscribers
            )
        )
        await callback.answer("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/weather - –ü–æ–≥–æ–¥–∞ –≤ –°–∞–º–∞—Ä–µ\n"
        "/storm - –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(
            is_subscribed=callback.from_user.id in storage.subscribers
        )
    )
    await callback.answer()
