import os
import json
import logging
from typing import Set, Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from bot.services.cache import data_cache
from bot.utils.keyboards import get_main_menu_keyboard
from bot.config import settings

__all__ = ['storage', 'setup_scheduler']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SubscriberStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏"""
    def __init__(self, default_ids: Optional[Set[int]] = None):
        self._default_ids = default_ids or {settings.admin_id}
        os.makedirs("data", exist_ok=True)
        self._file_path = "data/subscribers.json"
        self._subscribers = self._load_initial_data()

    @property
    def subscribers(self) -> Set[int]:
        """–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return self._subscribers

    def _load_initial_data(self) -> Set[int]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            with open(self._file_path, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return self._default_ids

    def add(self, chat_id: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if chat_id not in self._subscribers:
            self._subscribers.add(chat_id)
            self._save_data()

    def remove(self, chat_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if chat_id in self._subscribers:
            self._subscribers.remove(chat_id)
            self._save_data()

    def _save_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        with open(self._file_path, 'w', encoding='utf-8') as f:
            json.dump(list(self._subscribers), f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
storage = SubscriberStorage()
scheduler = AsyncIOScheduler()

# async def _send_message_safely(bot: Bot, chat_id: int, text: str) -> bool:
#     """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
#     try:
#         await bot.send_message(
#             chat_id,
#             text,
#             reply_markup=get_main_menu_keyboard(is_subscribed=chat_id in storage.subscribers)
#         )
#         return True
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id}: {e}")
#         if "chat not found" in str(e).lower():
#             storage.remove(chat_id)
#         return False

# async def send_regular_updates(bot: Bot) -> None:
#     """–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
#     weather = await data_cache.get_weather()
#     storms, kp_index = await data_cache.get_geomagnetic_data()
    
#     message_text = (
#         f"üå¶ –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (Kp: {kp_index}):\n\n"
#         f"{weather}\n\n"
#         f"{storms}"
#     )
    
#     for chat_id in list(storage.subscribers):
#         await _send_message_safely(bot, chat_id, message_text)

# async def check_storm_alerts(bot: Bot) -> None:
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö"""
#     _, kp_index = await data_cache.get_geomagnetic_data()
    
#     if kp_index >= 4:
#         alert_text = (
#             f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ú–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è (Kp: {kp_index})!\n\n"
#             "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
#             "- –°–Ω–∏–∑–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
#             "- –ü–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã\n"
#             "- –ò–∑–±–µ–≥–∞—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–≤"
#         )
        
#         for chat_id in list(storage.subscribers):
#             await _send_message_safely(bot, chat_id, alert_text)


async def _send_message_safely(bot: Bot, chat_id: int, text: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        await bot.send_message(
            chat_id,
            text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(is_subscribed=chat_id in storage.subscribers)
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id}: {e}")
        if "chat not found" in str(e).lower():
            storage.remove(chat_id)
        return False

async def send_regular_updates(bot: Bot) -> None:
    """–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    weather = await data_cache.get_weather()
    storms, kp_index = await data_cache.get_geomagnetic_data()
    
    message_text = (
        f"üå¶ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b> (Kp: {kp_index:.1f})\n\n"
        f"{weather}\n\n"
        f"{storms}"
    )
    
    for chat_id in list(storage.subscribers):
        await _send_message_safely(bot, chat_id, message_text)

async def check_storm_alerts(bot: Bot) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—É—Ä—è—Ö —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    _, kp_index = await data_cache.get_geomagnetic_data()
    
    if kp_index >= 4:
        alert_text = (
            f"‚ö†Ô∏è <b>–ú–ê–ì–ù–ò–¢–ù–ê–Ø –ë–£–†–Ø!</b> ‚ö†Ô∏è (Kp: {kp_index:.1f})\n\n"
            "üìå <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</i>\n"
            "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã\n"
            "‚Ä¢ –ò–∑–±–µ–≥–∞—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–≤"
        )
        
        for chat_id in list(storage.subscribers):
            await _send_message_safely(bot, chat_id, alert_text)


def setup_scheduler(bot: Bot) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    if scheduler.running:
        logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    scheduler.add_job(
        send_regular_updates,
        'interval',
        hours=4,
        kwargs={'bot': bot},
        id='regular_updates'
    )
    
    scheduler.add_job(
        check_storm_alerts,
        'interval',
        minutes=30,
        kwargs={'bot': bot},
        id='storm_alerts'
    )
    
    try:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
